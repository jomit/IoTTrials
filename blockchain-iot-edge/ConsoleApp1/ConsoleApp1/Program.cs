using System;
using Nethereum.Hex.HexTypes;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3.Accounts.Managed;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            //SubmitTransaction().Wait();
            RecordTransaction().Wait();
        }

        static async Task SubmitTransaction()
        {
            var abi = @"[{'constant':false,'inputs':[{'name':'key','type':'bytes32'},{'name':'name','type':'string'},{'name':'description','type':'string'}],'name':'StoreDocument','outputs':[{'name':'success','type':'bool'}],'type':'function'},{'constant':true,'inputs':[{'name':'','type':'bytes32'},{'name':'','type':'uint256'}],'name':'documents','outputs':[{'name':'name','type':'string'},{'name':'description','type':'string'},{'name':'sender','type':'address'}],'type':'function'}]";
            var byteCode = "0x6060604052610659806100126000396000f360606040526000357c0100000000000000000000000000000000000000000000000000000000900480634a75c0ff1461004457806379c17cc5146100fe57610042565b005b6100e86004808035906020019091908035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050909091908035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509090919050506102c9565b6040518082815260200191505060405180910390f35b61011d600480803590602001909190803590602001909190505061025b565b6040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381038352868181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156101c65780601f1061019b576101008083540402835291602001916101c6565b820191906000526020600020905b8154815290600101906020018083116101a957829003601f168201915b50508381038252858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156102495780601f1061021e57610100808354040283529160200191610249565b820191906000526020600020905b81548152906001019060200180831161022c57829003601f168201915b50509550505050505060405180910390f35b600060005060205281600052604060002060005081815481101561000257906000526020600020906003020160005b9150915050806000016000509080600101600050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b60006060604051908101604052806020604051908101604052806000815260200150815260200160206040519081016040528060008152602001508152602001600081526020015060606040519081016040528085815260200184815260200133815260200150905060006000506000868152602001908152602001600020600050805480600101828181548183558181151161049257600302816003028360005260206000209182019101610491919061037f565b8082111561048d57600060008201600050805460018160011615610100020316600290046000825580601f106103b557506103f2565b601f0160209004906000526020600020908101906103f191906103d3565b808211156103ed57600081815060009055506001016103d3565b5090565b5b5060018201600050805460018160011615610100020316600290046000825580601f1061041f575061045c565b601f01602090049060005260206000209081019061045b919061043d565b80821115610457576000818150600090555060010161043d565b5090565b5b506002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010161037f565b5090565b5b5050509190906000526020600020906003020160005b8390919091506000820151816000016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061050357805160ff1916838001178555610534565b82800160010185558215610534579182015b82811115610533578251826000505591602001919060010190610515565b5b50905061055f9190610541565b8082111561055b5760008181506000905550600101610541565b5090565b50506020820151816001016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105b657805160ff19168380011785556105e7565b828001600101855582156105e7579182015b828111156105e65782518260005055916020019190600101906105c8565b5b50905061061291906105f4565b8082111561060e57600081815060009055506001016105f4565b5090565b505060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff0219169083021790555050505060019150610651565b50939250505056";

            var tempWeb3 = new Nethereum.Geth.Web3Geth();
            var senderAddress = await tempWeb3.Eth.CoinBase.SendRequestAsync();

            var account = new ManagedAccount(senderAddress, "");
            var web3 = new Nethereum.Geth.Web3Geth(account);

            var transactionHash = await web3.Eth.DeployContract.SendRequestAsync(byteCode, senderAddress, new HexBigInteger(900000));
            //var receipt = await MineAndGetReceiptAsync(web3, transactionHash);
            var receipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(transactionHash);
            var contractAddress = receipt.ContractAddress;
            var contract = web3.Eth.GetContract(abi, contractAddress);
            var storeFunction = contract.GetFunction("StoreDocument");
            var documentsFunction = contract.GetFunction("documents");

            transactionHash = await storeFunction.SendTransactionAsync(senderAddress, new HexBigInteger(900000), null, "key1", "hello", "solidity is great");
            transactionHash = await storeFunction.SendTransactionAsync(senderAddress, new HexBigInteger(900000), null, "key1", "hello again", "ethereum is great");

            //receipt = await MineAndGetReceiptAsync(web3, transactionHash);
            receipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(transactionHash);

            var result = await documentsFunction.CallDeserializingToObjectAsync<Document>("key1", 0);
            var result2 = await documentsFunction.CallDeserializingToObjectAsync<Document>("key1", 1);

            Console.WriteLine(result.Name);
            Console.WriteLine(result2.Name);

            Console.ReadLine();
        }

        static async Task RecordTransaction()
        {
            var abi = @"[{'constant':false,'inputs':[],'name':'getState','outputs':[{'name':'state','type':'uint8'}],'payable':false,'type':'function'},{'constant':false,'inputs':[{'name':'deviceIdentifier','type':'string'},{'name':'data','type':'string'}],'name':'record','outputs':[{'name':'success','type':'bool'}],'payable':false,'type':'function'},{'constant':false,'inputs':[{'name':'data','type':'string'}],'name':'settle','outputs':[{'name':'success','type':'bool'}],'payable':false,'type':'function'},{'constant':false,'inputs':[{'name':'data','type':'string'}],'name':'verify','outputs':[{'name':'success','type':'bool'}],'payable':false,'type':'function'}]";
            var byteCode = "0x6060604052341561000f57600080fd5b5b6104d28061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631865c57d1461005f578063470bb62b1461008e578063baf312eb14610146578063bb9c6c3e146101bb575b600080fd5b341561006a57600080fd5b610072610230565b604051808260ff1660ff16815260200191505060405180910390f35b341561009957600080fd5b61012c600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610253565b604051808215151515815260200191505060405180910390f35b341561015157600080fd5b6101a1600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506102f2565b604051808215151515815260200191505060405180910390f35b34156101c657600080fd5b610216600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061037a565b604051808215151515815260200191505060405180910390f35b6000600160009054906101000a900460ff16600281111561024d57fe5b90505b90565b6000826000908051906020019061026b929190610401565b508160029080519060200190610282929190610401565b50336001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff021916908360028111156102e257fe5b0217905550600190505b92915050565b6000816006908051906020019061030a929190610401565b5033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600160006101000a81548160ff0219169083600281111561036b57fe5b0217905550600190505b919050565b60008160049080519060200190610392929190610401565b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060006101000a81548160ff021916908360028111156103f257fe5b0217905550600190505b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061044257805160ff1916838001178555610470565b82800160010185558215610470579182015b8281111561046f578251825591602001919060010190610454565b5b50905061047d9190610481565b5090565b6104a391905b8082111561049f576000816000905550600101610487565b5090565b905600a165627a7a72305820ab727d347585703d5476ab97e2fc08699135b4102f2866ffca72290d4f573f2c0029";

            var tempWeb3 = new Nethereum.Geth.Web3Geth();
            var senderAddress = await tempWeb3.Eth.CoinBase.SendRequestAsync();

            var account = new ManagedAccount(senderAddress, "");
            var web3 = new Nethereum.Geth.Web3Geth(account);

            var transactionHash = await web3.Eth.DeployContract.SendRequestAsync(byteCode, senderAddress, new HexBigInteger(900000));
            var receipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(transactionHash);
            var contractAddress = receipt.ContractAddress;
            var contract = web3.Eth.GetContract(abi, contractAddress);
            var recordFunction = contract.GetFunction("record");
            var getStateFunction = contract.GetFunction("getState");

            transactionHash = await recordFunction.SendTransactionAsync(senderAddress, new HexBigInteger(900000), null, "myleafdevice", "{ 'temperature' : 400, 'humidity' : 50 }");
            receipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(transactionHash);

            var result = await getStateFunction.CallAsync<int>();

            Console.WriteLine(result);
            Console.ReadLine();
        }
    }

    [FunctionOutput]
    public class Document
    {
        [Parameter("string", "name", 1)]
        public string Name { get; set; }

        [Parameter("string", "description", 2)]
        public string Description { get; set; }

        [Parameter("address", "sender", 3)]
        public string Sender { get; set; }
    }
}
